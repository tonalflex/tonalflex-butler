syntax = "proto3";

package butler;

// --- Session Service ---
service Session {
  rpc SaveSession (SaveSessionRequest) returns (SaveSessionResponse);
  rpc LoadSession (LoadSessionRequest) returns (LoadSessionResponse);
  rpc ListSessions (ListSessionsRequest) returns (ListSessionsResponse);
  rpc DeleteSession (DeleteSessionRequest) returns (DeleteSessionResponse);
}

message SaveSessionRequest {
  string name = 1;
  string json_data = 2; // Full SavedSession JSON blob
}

message SaveSessionResponse {
  bool success = 1;
  string message = 2;
}

message LoadSessionRequest {
  string name = 1;
}

message LoadSessionResponse {
  string json_data = 1;
  bool found = 2;
}

message ListSessionsRequest {}

message ListSessionsResponse {
  repeated string session_names = 1;
}

message DeleteSessionRequest {
  string name = 1;
}

message DeleteSessionResponse {
  bool success = 1;
  string message = 2;
}

// --- Wifi Service ---
service Wifi {
  rpc ListAvailableNetworks (Empty) returns (AvailableNetworksResponse);
  rpc ConnectToNetwork (WifiCredentials) returns (WifiConnectResponse);
}

message Empty {}

message AvailableNetworksResponse {
  repeated string ssids = 1;
}

message WifiCredentials {
  string ssid = 1;
  string password = 2;
}

message WifiConnectResponse {
  bool success = 1;
  string message = 2;
}

// --- MIDI Service ---
service Midi {
  rpc ListDevices (Empty) returns (MidiDevicesResponse);
  rpc ConnectDevice (MidiConnectRequest) returns (MidiConnectResponse);
}

message MidiDevice {
  int32 client_id = 1;
  int32 port_id = 2;
  string name = 3;
}

message MidiDevicesResponse {
  repeated MidiDevice devices = 1;
}

message MidiConnectRequest {
  int32 controller_client = 1;
  int32 controller_port = 2;
  int32 sushi_client = 3;
  int32 sushi_port = 4;
}

message MidiConnectResponse {
  bool success = 1;
  string message = 2;
}
